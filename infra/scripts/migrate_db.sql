-- ================================================================================================
-- AI NUTRITION COACH - SUPABASE SCHEMA
-- Version: 1.1
-- Description: This script sets up the complete database schema, including tables,
--              Row Level Security (RLS) policies, and functions for user management.
-- To Apply: Copy and paste the entire content into the Supabase SQL Editor.
-- ================================================================================================

-- ------------------------------------------------------------------------------------------------
-- TABLE 1: User Profiles (public.users)
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  auth_user_id uuid NOT NULL UNIQUE,
  created_at timestamptz NOT NULL DEFAULT now(),
  email character varying(255) NULL UNIQUE,
  current_streak integer NOT NULL DEFAULT 0,
  last_feedback_date date NULL,
  age integer NULL,
  gender text NULL,
  height numeric NULL,
  weight numeric NULL,
  activity_level text NULL,
  goal text NULL,
  base_calories numeric NULL,
  base_protein numeric NULL,
  base_carbs numeric NULL,
  base_fat numeric NULL,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_auth_user_id_fkey FOREIGN KEY (auth_user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- ------------------------------------------------------------------------------------------------
-- TABLE 2: Food Nutrition Data (public.food_nutrition_data)
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.food_nutrition_data (
    id bigint generated by default as identity,
    food_name text null,
    caloric_value numeric null,
    fat_g numeric null,
    saturated_fats_g numeric null,
    monounsaturated_fats_g numeric null,
    polyunsaturated_fats_g numeric null,
    carbohydrates_g numeric null,
    sugars_g numeric null,
    protein_g numeric null,
    dietary_fiber_g numeric null,
    cholesterol_mg numeric null,
    sodium_g numeric null,
    water_g numeric null,
    vitamin_a_mg numeric null,
    vitamin_b1_mg numeric null,
    vitamin_b11_mg numeric null,
    vitamin_b12_mg numeric null,
    vitamin_b2_mg numeric null,
    vitamin_b3_mg numeric null,
    vitamin_b5_mg numeric null,
    vitamin_b6_mg numeric null,
    vitamin_c_mg numeric null,
    vitamin_d_mg numeric null,
    vitamin_e_mg numeric null,
    vitamin_k_mg numeric null,
    calcium_mg numeric null,
    copper_mg numeric null,
    iron_mg numeric null,
    magnesium_mg numeric null,
    manganese_mg numeric null,
    phosphorus_mg numeric null,
    potassium_mg numeric null,
    selenium_mg numeric null,
    zinc_mg numeric null,
    nutrition_density numeric null,
    CONSTRAINT food_nutrition_data_pkey PRIMARY KEY (id)
);

ALTER TABLE public.food_nutrition_data ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to food data" ON public.food_nutrition_data FOR SELECT USING (true);


-- ------------------------------------------------------------------------------------------------
-- TABLE 3: Daily User Feedback (public.daily_feedback)
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.daily_feedback (
  id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_id uuid NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  satiety integer NOT NULL,
  energy integer NOT NULL,
  adherence integer NOT NULL,
  CONSTRAINT daily_feedback_pkey PRIMARY KEY (id),
  CONSTRAINT daily_feedback_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

ALTER TABLE public.daily_feedback ENABLE ROW LEVEL SECURITY;


-- ------------------------------------------------------------------------------------------------
-- TABLE 4: Web Push Subscriptions (public.user_subscriptions)
-- ------------------------------------------------------------------------------------------------
CREATE TABLE public.user_subscriptions (
  id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_id uuid NOT NULL UNIQUE,
  created_at timestamptz NOT NULL DEFAULT now(),
  subscription_object jsonb NOT NULL,
  CONSTRAINT user_subscriptions_pkey PRIMARY KEY (id),
  CONSTRAINT user_subscriptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE
);

ALTER TABLE public.user_subscriptions ENABLE ROW LEVEL SECURITY;

-- ================================================================================================
-- RLS POLICIES (SECURITY)
-- ================================================================================================

-- Policies for public.users table
CREATE POLICY "Allow individual read access on users" ON public.users FOR SELECT USING (auth.uid() = auth_user_id);
CREATE POLICY "Allow individual update access on users" ON public.users FOR UPDATE USING (auth.uid() = auth_user_id);
-- --- THE FIX ---
-- This new policy allows a logged-in user to create their own profile row,
-- making the `upsert` command work correctly.
CREATE POLICY "Allow individual insert for own profile" ON public.users FOR INSERT WITH CHECK (auth.uid() = auth_user_id);


-- Policies for public.daily_feedback table
CREATE POLICY "Allow individual read access on feedback" ON public.daily_feedback FOR SELECT USING (auth.uid() = (SELECT auth_user_id FROM public.users WHERE id = user_id));
CREATE POLICY "Allow individual insert access on feedback" ON public.daily_feedback FOR INSERT WITH CHECK (auth.uid() = (SELECT auth_user_id FROM public.users WHERE id = user_id));

-- Policies for public.user_subscriptions table
CREATE POLICY "Allow individual access on subscriptions" ON public.user_subscriptions FOR ALL USING (auth.uid() = (SELECT auth_user_id FROM public.users WHERE id = user_id));


-- ================================================================================================
-- FUNCTIONS AND TRIGGERS (AUTOMATION)
-- ================================================================================================

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.users (auth_user_id, email)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

